En este directorio podemos encontrar los siguiente ficheros

	td_arb_g.h
	td_arb_g.c : Contiene una implementacion por punteros del 
		      tda arbol generico, utilizando el esquema de
		      Hijo_Izquierda ; Hermano_Derecha

        td_cola.h
	td_cola.c : Implementacion del tda cola de nodos, (pertenecientes
		    al tda arbol generico)

	td_pila.h
	td_pila.c : Implementacion del tda pila de nodos.


	ana_lex.c : Fichero que hace uso del tda arbol generico. En este fichero
		    es donde tenemos que tocar para realizar la practica.

	

El esquema de la practica es el siguiente. Se lee un fichero (tipo texto) en
 el que se incluyen palabras. La idea es formar un arbol donde en cada nodo 
se almacene un caracter de forma que si recorremos el arbol desde las hojas 
hacia la raiz podamos construir la palabras almacenadas en el fichero. 
(Suponemos que una palabra no es subpalabra de ninguna otra)
Como las palabras pueden empezar de forma distinta, incluiremos un simbolo, 
del que suponemos que no pertenece a ninguna palabra como raiz del arbol.

Por ejemplo, si leemos "hola" "holor" "add" y "adios" el arbol resultante 
seria

			 *
			/ \
		       h   a
		      /    \
	             o      d
                    /      / \
                   l      d   i
                  / \          \
                 a   o          o
		      \          \
                       r          s


Ademas, en cada nodo, se incluye un contador de forma que no indique el 
numero de veces que aparece cada palabra en el fichero. (Dicha informacion 
se encuentra almacenada en las hojas del arbol)

Se pide.

1.-   Hacer una funcion que escriba las palabras, junto con el numero de
 veces que aparecen en el fichero
    Nota: Utilizar el TDA pila.

2.- Modificar la funcion Insertar_Cadena de forma que los nodos se almacenen 
segun el orden alfabetico.  Esto nos permitira presentar las palabras ordenadas 
alfabeticamente.

3.- Realizar una funcion que nos permita realizar un recorrido por niveles del 
arbol y utilizarla como base para escribir las palabras ordenadas segun su
 longitud.
  
 Nota: Utilizar el TDA Cola de Nodos.

4.- Modificar las funciones que sean necesarias  de forma que  se permita que   
existan palabras que esten incluidas completamente en otras.

5.- Realizar una funcion que dado dos nodos del arbol, nos permita escribir 
aquel prefijo que sea comun a ambas palabras. Asi, si recibe la 'r' y la 'l' 
deberia mostrar en la salida "hol"

  Nota: Utilizar el TDA pila.

